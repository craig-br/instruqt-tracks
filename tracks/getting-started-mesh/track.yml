slug: mesh-test
id: akkabmifu15z
type: track
title: mesh-test
teaser: In this track, you'll learn about automation mesh features, perform basic
  configuration tasks and use it to run a job template
description: |
  <img src="https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/logos/Logo-Red_Hat-Ansible_Automation_Platform-A-Standard-RGB.png" alt="drawing" style=";width:400px"/>
  <br>

  # Red Hat Ansible automation mesh
  ***

  <br>

  The [**automation mesh**](https://www.ansible.com/blog/whats-new-in-ansible-automation-platform-2.1-automation-mesh) component of Ansible Automation Platform is a multi-directional, multi-hopped overlay network of nodes delivering automation across constrained networks, such as DMZs and VPCs, to local and remote endpoints across the globe.

  Automation mesh introduces new features that remove dependencies on ancillary tools such as jump hosts and SSH proxies by localizing automation with a security-first approach.
  <br>

  This lab covers:

  * Automation mesh node types and features
  * How to use automation controller logically group execution capacity
  * Using automation mesh in multi-site environments
  * Building redundancy into your automation mesh design
icon: https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/icons/automation_mesh.png
level: beginner
tags:
- ansible
- ' ansible automation platform'
- ' mesh'
- ' automation mesh'
owner: redhat
developers:
- cbrandt@redhat.com
private: true
published: false
maintenance: true
show_timer: true
challenges:
- slug: overview
  id: 2y22esvrwfyd
  type: challenge
  title: Automation mesh overview
  teaser: In this challenge, we'll explore automation mesh concepts
  notes:
  - type: text
    contents: "# Challenge summary\n<br>\n\n<p align=\"center\">\n  <img width=\"500px\"
      src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_high_level.png\">\n</p>\n<br>\n\nIn
      this challenge, we'll cover the different automation mesh node types and instance
      groups created during the Ansible Automation Platform installation.\n\n<style
      type=\"text/css\" rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  - type: text
    contents: "# Automation mesh\n<br>\n<p align=\"center\">\n  <img width=\"700px\"
      src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_instances_view.png\">\n</p>\n<br>\n\n**Automation
      mesh** is an overlay network intended to ease the distribution of work across
      a large and dispersed collection of workers. Mesh nodes establish peer-to-peer
      connections with each other across your existing networks.\n\nAutomation mesh
      enables independent scaling of control and execution capacity for local and
      remote automation workloads with little or no downtime.\n\n<style type=\"text/css\"
      rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  - type: text
    contents: "# Automation mesh worker node types\n<br>\n<p align=\"center\">\n  <img
      width=\"700px\" src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_default_igs.png\">\n</p>\n<br>\n\n**Automation
      mesh** enables independent scaling of *control plane* and *execution plane*
      capacity and is configured during the Ansible Automation Platform installation.
      It allows you to create worker node types and allocate the capacity to control
      tasks (e.g. RBAC, auditing ), and execution tasks ( running your playbooks ).\n\n\n**Automation
      mesh** worker nodes are logically grouped using [*automation controller instance
      groups*](https://docs.ansible.com/automation-controller/latest/html/userguide/instance_groups.html).\n\n\n<style
      type=\"text/css\" rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  assignment: |-
    *Login credentials:*<p>
    User: admin <p>
    Password: ansible123!

    > **Note**
    > All tasks are performed in the automation controller dashboard
    >

    ## Your assignment


    * On the side navigation under the **Administration** section, click on **Instance Groups**
    * Click on the `default`instance group
    * Click on the `Instances` tab on the top

    ![default_ig](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_default_ig_instances.png)


    * The **`default` instance group** is the default location for all mesh worker nodes and is always present in automation controller. It's used to execute *Job Templates* if no instance group is specified in their configuration.

    * Click on the `mesh-exec1` instance and have a look at the `Node Type`. `mesh-exec1` is configured as an **execution node**.
      * **Execution nodes** replace isolated nodes used in Ansible Tower and fulfills the same functions. This node is dedicated to run **Job Templates** and does not execute any controller runtime functions.

    ![mesh-exec1](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_mesh-exec1.png)

    * Click on **Instance Groups** under the **Administration** section to return to the main instance group window
    * Click on the `controlplane` instance group.
    * Click on the `Instances` tab on the top

    ![controlplane](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_controlplane_ig_instances.png)

    * The **`controlplane` instance group** is the preselected instance group for all mesh worker nodes that run control plane tasks.

    * Click on the `automation-controller21` instance and have a look at the `Node Type`. `automation-controller21` is configured as a **hybrid** node.
      * **Hybrid nodes** can run automation controller runtime functions, like project updates and management jobs, and run automation jobs.

    * The `controlplane` instance group also contains another node type, called **Control nodes**. **Control nodes** are dedicated to running control plane tasks and does not execute any automation jobs.

    ![automation-controller21](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_automation-controller21.png)

    * When you are done, press the `Check` button below to go to the next challenge.
  tabs:
  - title: Controller UI
    type: service
    hostname: automation-controller21
    port: 443
  difficulty: basic
  timelimit: 900
- slug: mesh-instance-groups
  id: j5xbmsjakj6r
  type: challenge
  title: Automation mesh and instance groups
  teaser: In this challenge, we'll create new instance groups and allocate mesh worker
    nodes for local and remote execution
  notes:
  - type: text
    contents: "# Challenge summary\n<br>\n\n<p align=\"center\">\n  <img width=\"500px\"
      src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_map_jhb.png\">\n</p>\n<br>\n\nACME
      Corp is a global company based in Raleigh, United States, with remote locations
      across the globe. One of these remote locations is Johannesburg, South Africa.\n\nIn
      this challenge, we'll create **instance groups** for the Raleigh and Johannesburg
      data centers and allocate automation mesh worker nodes to them.\n\n\n<style
      type=\"text/css\" rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  - type: text
    contents: "# Automation mesh and instance groups\n<br>\n<p align=\"center\">\n
      \ <img width=\"600px\" src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_jhb_ig.png\">\n</p>\n<br>\n\n[**Instance
      groups**](https://docs.ansible.com/automation-controller/latest/html/administration/containers_instance_groups.html)
      logically arranges execution capacity and provides control on where an automation
      job runs.\n\nAutomation mesh worker nodes are assigned to **instance groups**
      during installation or via automation controller.\n\n<style type=\"text/css\"
      rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  - type: text
    contents: "# Mesh node health checks\n<br>\n<p align=\"center\">\n  <img width=\"600px\"
      src=\"https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_node_health_check.png\">\n</p>\n<br>\n\nAutomation
      mesh performs capacity health checks on worker nodes based on CPU, memory and
      other metrics.\n\nMesh uses these metrics to dynamically calculate the optimal
      route and node to execute automation jobs, based on your configuration.\n\n<style
      type=\"text/css\" rel=\"stylesheet\">\nh1 {\n\ttext-align: center\n\t}\n</style>"
  assignment: |
    **Controller login credentials:**<p>
    *User*: admin <p>
    *Password*: ansible123!

    > **Note**<p>
    >
    > All tasks are performed in the automation controller dashboard.<p>
    > All the fields are **case-sensitive** and the check will fail! Please ensure you use the same capitalization as used in the assignments.

    ## Your assignment

    Automation controller is deployed in the Raleigh data center and we want to run our automation jobs locally using the **automation-controller21 hybrid node**.
    <br>

    **Create a new instance group for Raleigh data center**

    * On the side navigation under the **Administration** section, click on **Instance Groups**
    * Click on the **Add** and select **Add instance group**
    * Create a new instance group and name it `Raleigh data center`.
    * Click on **Save**

    ![raleigh_ig](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_raleigh_ig_create.png)
    <br>

    **Associate the `automation-controller21` instance with the **Raleigh data center** instance group**
    * Click on **Instances** on the top menu.
    * Click on **Associate**
    * Select the `automation-controller21` instance and click on **Save**

    ![raleigh_associate](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_raleigh_associate_instance.png)
    <br>

    We also need to run automation jobs in Johannesburg, South Africa. To do this, we'll create a new instance group and associate the **mesh-exec1 execution node** which is deployed in the data center.
    <br>

    **Create a new instance group for Johannesburg data center**

    * On the side navigation under the **Administration** section, click on **Instance Groups**
    * Click on the **Add** and select **Add instance group**
    * Create a new instance group and name it `Johannesburg data center`.
    * Click on **Save**

    ![raleigh_ig](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_jhb_ig_create.png)
    <br>

    **Associate the `mesh-exec1` instance with the **Johannesburg data center** instance group**
    * Click on **Instances** on the top menu.
    * Click on **Associate**
    * Select the `mesh-exec1` instance and click on **Save**

    ![jhb_associate](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh/mesh_jhb_associate_instance.png)
    <br>

    Automation mesh performs health checks on worker nodes to determine the optimal route and automation job allocation. Let's run a health check on `mesh-exec1` in Johannesburg.

    **Worker node health checks**

    * On the side navigation under the **Administration** section, click on **Instance Groups**
    * Click on the `Johannesburg data center` instance group
    * Click on **Instances** on the top menu.
    * Select `mesh-exec1` by clicking on the checkbox next it
    * Click on **Save**

    ![mesh-exec1_health](https://raw.githubusercontent.com/craig-br/instruqt-tracks/devel/assets/mesh mesh_health_check_mesh-exec1.png)
    <br>

    * When you are done, press the `Check` button below to go to the next challenge.
  tabs:
  - title: Controller UI
    type: service
    hostname: automation-controller21
    port: 443
  - title: editor
    type: service
    hostname: automation-controller21
    path: /editor/
    port: 443
    new_window: true
  - title: cli
    type: terminal
    hostname: automation-controller21
  difficulty: basic
  timelimit: 9000
checksum: "15255553661990657023"
